// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package esi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi(in *jlexer.Lexer, out *PostUniverseIdsOkList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostUniverseIdsOkList, 0, 1)
			} else {
				*out = PostUniverseIdsOkList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 PostUniverseIdsOk
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi(out *jwriter.Writer, in PostUniverseIdsOkList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostUniverseIdsOkList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostUniverseIdsOkList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostUniverseIdsOkList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostUniverseIdsOkList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi(l, v)
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi1(in *jlexer.Lexer, out *PostUniverseIdsOk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agents":
			if in.IsNull() {
				in.Skip()
				out.Agents = nil
			} else {
				in.Delim('[')
				if out.Agents == nil {
					if !in.IsDelim(']') {
						out.Agents = make([]PostUniverseIdsAgent, 0, 2)
					} else {
						out.Agents = []PostUniverseIdsAgent{}
					}
				} else {
					out.Agents = (out.Agents)[:0]
				}
				for !in.IsDelim(']') {
					var v4 PostUniverseIdsAgent
					(v4).UnmarshalEasyJSON(in)
					out.Agents = append(out.Agents, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "alliances":
			if in.IsNull() {
				in.Skip()
				out.Alliances = nil
			} else {
				in.Delim('[')
				if out.Alliances == nil {
					if !in.IsDelim(']') {
						out.Alliances = make([]PostUniverseIdsAlliance, 0, 2)
					} else {
						out.Alliances = []PostUniverseIdsAlliance{}
					}
				} else {
					out.Alliances = (out.Alliances)[:0]
				}
				for !in.IsDelim(']') {
					var v5 PostUniverseIdsAlliance
					(v5).UnmarshalEasyJSON(in)
					out.Alliances = append(out.Alliances, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "characters":
			if in.IsNull() {
				in.Skip()
				out.Characters = nil
			} else {
				in.Delim('[')
				if out.Characters == nil {
					if !in.IsDelim(']') {
						out.Characters = make([]PostUniverseIdsCharacter, 0, 2)
					} else {
						out.Characters = []PostUniverseIdsCharacter{}
					}
				} else {
					out.Characters = (out.Characters)[:0]
				}
				for !in.IsDelim(']') {
					var v6 PostUniverseIdsCharacter
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi2(in, &v6)
					out.Characters = append(out.Characters, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "constellations":
			if in.IsNull() {
				in.Skip()
				out.Constellations = nil
			} else {
				in.Delim('[')
				if out.Constellations == nil {
					if !in.IsDelim(']') {
						out.Constellations = make([]PostUniverseIdsConstellation, 0, 2)
					} else {
						out.Constellations = []PostUniverseIdsConstellation{}
					}
				} else {
					out.Constellations = (out.Constellations)[:0]
				}
				for !in.IsDelim(']') {
					var v7 PostUniverseIdsConstellation
					(v7).UnmarshalEasyJSON(in)
					out.Constellations = append(out.Constellations, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "corporations":
			if in.IsNull() {
				in.Skip()
				out.Corporations = nil
			} else {
				in.Delim('[')
				if out.Corporations == nil {
					if !in.IsDelim(']') {
						out.Corporations = make([]PostUniverseIdsCorporation, 0, 2)
					} else {
						out.Corporations = []PostUniverseIdsCorporation{}
					}
				} else {
					out.Corporations = (out.Corporations)[:0]
				}
				for !in.IsDelim(']') {
					var v8 PostUniverseIdsCorporation
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi3(in, &v8)
					out.Corporations = append(out.Corporations, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "factions":
			if in.IsNull() {
				in.Skip()
				out.Factions = nil
			} else {
				in.Delim('[')
				if out.Factions == nil {
					if !in.IsDelim(']') {
						out.Factions = make([]PostUniverseIdsFaction, 0, 2)
					} else {
						out.Factions = []PostUniverseIdsFaction{}
					}
				} else {
					out.Factions = (out.Factions)[:0]
				}
				for !in.IsDelim(']') {
					var v9 PostUniverseIdsFaction
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi4(in, &v9)
					out.Factions = append(out.Factions, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inventory_types":
			if in.IsNull() {
				in.Skip()
				out.InventoryTypes = nil
			} else {
				in.Delim('[')
				if out.InventoryTypes == nil {
					if !in.IsDelim(']') {
						out.InventoryTypes = make([]PostUniverseIdsInventoryType, 0, 2)
					} else {
						out.InventoryTypes = []PostUniverseIdsInventoryType{}
					}
				} else {
					out.InventoryTypes = (out.InventoryTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 PostUniverseIdsInventoryType
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi5(in, &v10)
					out.InventoryTypes = append(out.InventoryTypes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regions":
			if in.IsNull() {
				in.Skip()
				out.Regions = nil
			} else {
				in.Delim('[')
				if out.Regions == nil {
					if !in.IsDelim(']') {
						out.Regions = make([]PostUniverseIdsRegion, 0, 2)
					} else {
						out.Regions = []PostUniverseIdsRegion{}
					}
				} else {
					out.Regions = (out.Regions)[:0]
				}
				for !in.IsDelim(']') {
					var v11 PostUniverseIdsRegion
					(v11).UnmarshalEasyJSON(in)
					out.Regions = append(out.Regions, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "systems":
			if in.IsNull() {
				in.Skip()
				out.Systems = nil
			} else {
				in.Delim('[')
				if out.Systems == nil {
					if !in.IsDelim(']') {
						out.Systems = make([]PostUniverseIdsSystem, 0, 2)
					} else {
						out.Systems = []PostUniverseIdsSystem{}
					}
				} else {
					out.Systems = (out.Systems)[:0]
				}
				for !in.IsDelim(']') {
					var v12 PostUniverseIdsSystem
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi6(in, &v12)
					out.Systems = append(out.Systems, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stations":
			if in.IsNull() {
				in.Skip()
				out.Stations = nil
			} else {
				in.Delim('[')
				if out.Stations == nil {
					if !in.IsDelim(']') {
						out.Stations = make([]PostUniverseIdsStation, 0, 2)
					} else {
						out.Stations = []PostUniverseIdsStation{}
					}
				} else {
					out.Stations = (out.Stations)[:0]
				}
				for !in.IsDelim(']') {
					var v13 PostUniverseIdsStation
					easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi7(in, &v13)
					out.Stations = append(out.Stations, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi1(out *jwriter.Writer, in PostUniverseIdsOk) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Agents) != 0 {
		const prefix string = ",\"agents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Agents {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Alliances) != 0 {
		const prefix string = ",\"alliances\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.Alliances {
				if v16 > 0 {
					out.RawByte(',')
				}
				(v17).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Characters) != 0 {
		const prefix string = ",\"characters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.Characters {
				if v18 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi2(out, v19)
			}
			out.RawByte(']')
		}
	}
	if len(in.Constellations) != 0 {
		const prefix string = ",\"constellations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Constellations {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Corporations) != 0 {
		const prefix string = ",\"corporations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.Corporations {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi3(out, v23)
			}
			out.RawByte(']')
		}
	}
	if len(in.Factions) != 0 {
		const prefix string = ",\"factions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Factions {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi4(out, v25)
			}
			out.RawByte(']')
		}
	}
	if len(in.InventoryTypes) != 0 {
		const prefix string = ",\"inventory_types\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.InventoryTypes {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi5(out, v27)
			}
			out.RawByte(']')
		}
	}
	if len(in.Regions) != 0 {
		const prefix string = ",\"regions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Regions {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Systems) != 0 {
		const prefix string = ",\"systems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.Systems {
				if v30 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi6(out, v31)
			}
			out.RawByte(']')
		}
	}
	if len(in.Stations) != 0 {
		const prefix string = ",\"stations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Stations {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi7(out, v33)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostUniverseIdsOk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostUniverseIdsOk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostUniverseIdsOk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostUniverseIdsOk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi1(l, v)
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi7(in *jlexer.Lexer, out *PostUniverseIdsStation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi7(out *jwriter.Writer, in PostUniverseIdsStation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi6(in *jlexer.Lexer, out *PostUniverseIdsSystem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi6(out *jwriter.Writer, in PostUniverseIdsSystem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi5(in *jlexer.Lexer, out *PostUniverseIdsInventoryType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi5(out *jwriter.Writer, in PostUniverseIdsInventoryType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi4(in *jlexer.Lexer, out *PostUniverseIdsFaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi4(out *jwriter.Writer, in PostUniverseIdsFaction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi3(in *jlexer.Lexer, out *PostUniverseIdsCorporation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi3(out *jwriter.Writer, in PostUniverseIdsCorporation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonEfd605a0DecodeGithubComAntihaxGoesiEsi2(in *jlexer.Lexer, out *PostUniverseIdsCharacter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEfd605a0EncodeGithubComAntihaxGoesiEsi2(out *jwriter.Writer, in PostUniverseIdsCharacter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
