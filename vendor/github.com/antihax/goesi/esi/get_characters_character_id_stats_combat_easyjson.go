// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package esi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsCombatList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetCharactersCharacterIdStatsCombatList, 0, 1)
			} else {
				*out = GetCharactersCharacterIdStatsCombatList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 GetCharactersCharacterIdStatsCombat
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi(out *jwriter.Writer, in GetCharactersCharacterIdStatsCombatList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsCombatList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsCombatList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsCombatList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsCombatList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi(l, v)
}
func easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi1(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsCombat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cap_drainedby_npc":
			out.CapDrainedbyNpc = int64(in.Int64())
		case "cap_drainedby_pc":
			out.CapDrainedbyPc = int64(in.Int64())
		case "cap_draining_pc":
			out.CapDrainingPc = int64(in.Int64())
		case "criminal_flag_set":
			out.CriminalFlagSet = int64(in.Int64())
		case "damage_from_np_cs_amount":
			out.DamageFromNpCsAmount = int64(in.Int64())
		case "damage_from_np_cs_num_shots":
			out.DamageFromNpCsNumShots = int64(in.Int64())
		case "damage_from_players_bomb_amount":
			out.DamageFromPlayersBombAmount = int64(in.Int64())
		case "damage_from_players_bomb_num_shots":
			out.DamageFromPlayersBombNumShots = int64(in.Int64())
		case "damage_from_players_combat_drone_amount":
			out.DamageFromPlayersCombatDroneAmount = int64(in.Int64())
		case "damage_from_players_combat_drone_num_shots":
			out.DamageFromPlayersCombatDroneNumShots = int64(in.Int64())
		case "damage_from_players_energy_amount":
			out.DamageFromPlayersEnergyAmount = int64(in.Int64())
		case "damage_from_players_energy_num_shots":
			out.DamageFromPlayersEnergyNumShots = int64(in.Int64())
		case "damage_from_players_fighter_bomber_amount":
			out.DamageFromPlayersFighterBomberAmount = int64(in.Int64())
		case "damage_from_players_fighter_bomber_num_shots":
			out.DamageFromPlayersFighterBomberNumShots = int64(in.Int64())
		case "damage_from_players_fighter_drone_amount":
			out.DamageFromPlayersFighterDroneAmount = int64(in.Int64())
		case "damage_from_players_fighter_drone_num_shots":
			out.DamageFromPlayersFighterDroneNumShots = int64(in.Int64())
		case "damage_from_players_hybrid_amount":
			out.DamageFromPlayersHybridAmount = int64(in.Int64())
		case "damage_from_players_hybrid_num_shots":
			out.DamageFromPlayersHybridNumShots = int64(in.Int64())
		case "damage_from_players_missile_amount":
			out.DamageFromPlayersMissileAmount = int64(in.Int64())
		case "damage_from_players_missile_num_shots":
			out.DamageFromPlayersMissileNumShots = int64(in.Int64())
		case "damage_from_players_projectile_amount":
			out.DamageFromPlayersProjectileAmount = int64(in.Int64())
		case "damage_from_players_projectile_num_shots":
			out.DamageFromPlayersProjectileNumShots = int64(in.Int64())
		case "damage_from_players_smart_bomb_amount":
			out.DamageFromPlayersSmartBombAmount = int64(in.Int64())
		case "damage_from_players_smart_bomb_num_shots":
			out.DamageFromPlayersSmartBombNumShots = int64(in.Int64())
		case "damage_from_players_super_amount":
			out.DamageFromPlayersSuperAmount = int64(in.Int64())
		case "damage_from_players_super_num_shots":
			out.DamageFromPlayersSuperNumShots = int64(in.Int64())
		case "damage_from_structures_total_amount":
			out.DamageFromStructuresTotalAmount = int64(in.Int64())
		case "damage_from_structures_total_num_shots":
			out.DamageFromStructuresTotalNumShots = int64(in.Int64())
		case "damage_to_players_bomb_amount":
			out.DamageToPlayersBombAmount = int64(in.Int64())
		case "damage_to_players_bomb_num_shots":
			out.DamageToPlayersBombNumShots = int64(in.Int64())
		case "damage_to_players_combat_drone_amount":
			out.DamageToPlayersCombatDroneAmount = int64(in.Int64())
		case "damage_to_players_combat_drone_num_shots":
			out.DamageToPlayersCombatDroneNumShots = int64(in.Int64())
		case "damage_to_players_energy_amount":
			out.DamageToPlayersEnergyAmount = int64(in.Int64())
		case "damage_to_players_energy_num_shots":
			out.DamageToPlayersEnergyNumShots = int64(in.Int64())
		case "damage_to_players_fighter_bomber_amount":
			out.DamageToPlayersFighterBomberAmount = int64(in.Int64())
		case "damage_to_players_fighter_bomber_num_shots":
			out.DamageToPlayersFighterBomberNumShots = int64(in.Int64())
		case "damage_to_players_fighter_drone_amount":
			out.DamageToPlayersFighterDroneAmount = int64(in.Int64())
		case "damage_to_players_fighter_drone_num_shots":
			out.DamageToPlayersFighterDroneNumShots = int64(in.Int64())
		case "damage_to_players_hybrid_amount":
			out.DamageToPlayersHybridAmount = int64(in.Int64())
		case "damage_to_players_hybrid_num_shots":
			out.DamageToPlayersHybridNumShots = int64(in.Int64())
		case "damage_to_players_missile_amount":
			out.DamageToPlayersMissileAmount = int64(in.Int64())
		case "damage_to_players_missile_num_shots":
			out.DamageToPlayersMissileNumShots = int64(in.Int64())
		case "damage_to_players_projectile_amount":
			out.DamageToPlayersProjectileAmount = int64(in.Int64())
		case "damage_to_players_projectile_num_shots":
			out.DamageToPlayersProjectileNumShots = int64(in.Int64())
		case "damage_to_players_smart_bomb_amount":
			out.DamageToPlayersSmartBombAmount = int64(in.Int64())
		case "damage_to_players_smart_bomb_num_shots":
			out.DamageToPlayersSmartBombNumShots = int64(in.Int64())
		case "damage_to_players_super_amount":
			out.DamageToPlayersSuperAmount = int64(in.Int64())
		case "damage_to_players_super_num_shots":
			out.DamageToPlayersSuperNumShots = int64(in.Int64())
		case "damage_to_structures_total_amount":
			out.DamageToStructuresTotalAmount = int64(in.Int64())
		case "damage_to_structures_total_num_shots":
			out.DamageToStructuresTotalNumShots = int64(in.Int64())
		case "deaths_high_sec":
			out.DeathsHighSec = int64(in.Int64())
		case "deaths_low_sec":
			out.DeathsLowSec = int64(in.Int64())
		case "deaths_null_sec":
			out.DeathsNullSec = int64(in.Int64())
		case "deaths_pod_high_sec":
			out.DeathsPodHighSec = int64(in.Int64())
		case "deaths_pod_low_sec":
			out.DeathsPodLowSec = int64(in.Int64())
		case "deaths_pod_null_sec":
			out.DeathsPodNullSec = int64(in.Int64())
		case "deaths_pod_wormhole":
			out.DeathsPodWormhole = int64(in.Int64())
		case "deaths_wormhole":
			out.DeathsWormhole = int64(in.Int64())
		case "drone_engage":
			out.DroneEngage = int64(in.Int64())
		case "dscans":
			out.Dscans = int64(in.Int64())
		case "duel_requested":
			out.DuelRequested = int64(in.Int64())
		case "engagement_register":
			out.EngagementRegister = int64(in.Int64())
		case "kills_assists":
			out.KillsAssists = int64(in.Int64())
		case "kills_high_sec":
			out.KillsHighSec = int64(in.Int64())
		case "kills_low_sec":
			out.KillsLowSec = int64(in.Int64())
		case "kills_null_sec":
			out.KillsNullSec = int64(in.Int64())
		case "kills_pod_high_sec":
			out.KillsPodHighSec = int64(in.Int64())
		case "kills_pod_low_sec":
			out.KillsPodLowSec = int64(in.Int64())
		case "kills_pod_null_sec":
			out.KillsPodNullSec = int64(in.Int64())
		case "kills_pod_wormhole":
			out.KillsPodWormhole = int64(in.Int64())
		case "kills_wormhole":
			out.KillsWormhole = int64(in.Int64())
		case "npc_flag_set":
			out.NpcFlagSet = int64(in.Int64())
		case "probe_scans":
			out.ProbeScans = int64(in.Int64())
		case "pvp_flag_set":
			out.PvpFlagSet = int64(in.Int64())
		case "repair_armor_by_remote_amount":
			out.RepairArmorByRemoteAmount = int64(in.Int64())
		case "repair_armor_remote_amount":
			out.RepairArmorRemoteAmount = int64(in.Int64())
		case "repair_armor_self_amount":
			out.RepairArmorSelfAmount = int64(in.Int64())
		case "repair_capacitor_by_remote_amount":
			out.RepairCapacitorByRemoteAmount = int64(in.Int64())
		case "repair_capacitor_remote_amount":
			out.RepairCapacitorRemoteAmount = int64(in.Int64())
		case "repair_capacitor_self_amount":
			out.RepairCapacitorSelfAmount = int64(in.Int64())
		case "repair_hull_by_remote_amount":
			out.RepairHullByRemoteAmount = int64(in.Int64())
		case "repair_hull_remote_amount":
			out.RepairHullRemoteAmount = int64(in.Int64())
		case "repair_hull_self_amount":
			out.RepairHullSelfAmount = int64(in.Int64())
		case "repair_shield_by_remote_amount":
			out.RepairShieldByRemoteAmount = int64(in.Int64())
		case "repair_shield_remote_amount":
			out.RepairShieldRemoteAmount = int64(in.Int64())
		case "repair_shield_self_amount":
			out.RepairShieldSelfAmount = int64(in.Int64())
		case "self_destructs":
			out.SelfDestructs = int64(in.Int64())
		case "warp_scramble_pc":
			out.WarpScramblePc = int64(in.Int64())
		case "warp_scrambledby_npc":
			out.WarpScrambledbyNpc = int64(in.Int64())
		case "warp_scrambledby_pc":
			out.WarpScrambledbyPc = int64(in.Int64())
		case "weapon_flag_set":
			out.WeaponFlagSet = int64(in.Int64())
		case "webifiedby_npc":
			out.WebifiedbyNpc = int64(in.Int64())
		case "webifiedby_pc":
			out.WebifiedbyPc = int64(in.Int64())
		case "webifying_pc":
			out.WebifyingPc = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi1(out *jwriter.Writer, in GetCharactersCharacterIdStatsCombat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CapDrainedbyNpc != 0 {
		const prefix string = ",\"cap_drainedby_npc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CapDrainedbyNpc))
	}
	if in.CapDrainedbyPc != 0 {
		const prefix string = ",\"cap_drainedby_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CapDrainedbyPc))
	}
	if in.CapDrainingPc != 0 {
		const prefix string = ",\"cap_draining_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CapDrainingPc))
	}
	if in.CriminalFlagSet != 0 {
		const prefix string = ",\"criminal_flag_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CriminalFlagSet))
	}
	if in.DamageFromNpCsAmount != 0 {
		const prefix string = ",\"damage_from_np_cs_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromNpCsAmount))
	}
	if in.DamageFromNpCsNumShots != 0 {
		const prefix string = ",\"damage_from_np_cs_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromNpCsNumShots))
	}
	if in.DamageFromPlayersBombAmount != 0 {
		const prefix string = ",\"damage_from_players_bomb_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersBombAmount))
	}
	if in.DamageFromPlayersBombNumShots != 0 {
		const prefix string = ",\"damage_from_players_bomb_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersBombNumShots))
	}
	if in.DamageFromPlayersCombatDroneAmount != 0 {
		const prefix string = ",\"damage_from_players_combat_drone_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersCombatDroneAmount))
	}
	if in.DamageFromPlayersCombatDroneNumShots != 0 {
		const prefix string = ",\"damage_from_players_combat_drone_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersCombatDroneNumShots))
	}
	if in.DamageFromPlayersEnergyAmount != 0 {
		const prefix string = ",\"damage_from_players_energy_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersEnergyAmount))
	}
	if in.DamageFromPlayersEnergyNumShots != 0 {
		const prefix string = ",\"damage_from_players_energy_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersEnergyNumShots))
	}
	if in.DamageFromPlayersFighterBomberAmount != 0 {
		const prefix string = ",\"damage_from_players_fighter_bomber_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersFighterBomberAmount))
	}
	if in.DamageFromPlayersFighterBomberNumShots != 0 {
		const prefix string = ",\"damage_from_players_fighter_bomber_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersFighterBomberNumShots))
	}
	if in.DamageFromPlayersFighterDroneAmount != 0 {
		const prefix string = ",\"damage_from_players_fighter_drone_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersFighterDroneAmount))
	}
	if in.DamageFromPlayersFighterDroneNumShots != 0 {
		const prefix string = ",\"damage_from_players_fighter_drone_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersFighterDroneNumShots))
	}
	if in.DamageFromPlayersHybridAmount != 0 {
		const prefix string = ",\"damage_from_players_hybrid_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersHybridAmount))
	}
	if in.DamageFromPlayersHybridNumShots != 0 {
		const prefix string = ",\"damage_from_players_hybrid_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersHybridNumShots))
	}
	if in.DamageFromPlayersMissileAmount != 0 {
		const prefix string = ",\"damage_from_players_missile_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersMissileAmount))
	}
	if in.DamageFromPlayersMissileNumShots != 0 {
		const prefix string = ",\"damage_from_players_missile_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersMissileNumShots))
	}
	if in.DamageFromPlayersProjectileAmount != 0 {
		const prefix string = ",\"damage_from_players_projectile_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersProjectileAmount))
	}
	if in.DamageFromPlayersProjectileNumShots != 0 {
		const prefix string = ",\"damage_from_players_projectile_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersProjectileNumShots))
	}
	if in.DamageFromPlayersSmartBombAmount != 0 {
		const prefix string = ",\"damage_from_players_smart_bomb_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersSmartBombAmount))
	}
	if in.DamageFromPlayersSmartBombNumShots != 0 {
		const prefix string = ",\"damage_from_players_smart_bomb_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersSmartBombNumShots))
	}
	if in.DamageFromPlayersSuperAmount != 0 {
		const prefix string = ",\"damage_from_players_super_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersSuperAmount))
	}
	if in.DamageFromPlayersSuperNumShots != 0 {
		const prefix string = ",\"damage_from_players_super_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromPlayersSuperNumShots))
	}
	if in.DamageFromStructuresTotalAmount != 0 {
		const prefix string = ",\"damage_from_structures_total_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromStructuresTotalAmount))
	}
	if in.DamageFromStructuresTotalNumShots != 0 {
		const prefix string = ",\"damage_from_structures_total_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageFromStructuresTotalNumShots))
	}
	if in.DamageToPlayersBombAmount != 0 {
		const prefix string = ",\"damage_to_players_bomb_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersBombAmount))
	}
	if in.DamageToPlayersBombNumShots != 0 {
		const prefix string = ",\"damage_to_players_bomb_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersBombNumShots))
	}
	if in.DamageToPlayersCombatDroneAmount != 0 {
		const prefix string = ",\"damage_to_players_combat_drone_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersCombatDroneAmount))
	}
	if in.DamageToPlayersCombatDroneNumShots != 0 {
		const prefix string = ",\"damage_to_players_combat_drone_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersCombatDroneNumShots))
	}
	if in.DamageToPlayersEnergyAmount != 0 {
		const prefix string = ",\"damage_to_players_energy_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersEnergyAmount))
	}
	if in.DamageToPlayersEnergyNumShots != 0 {
		const prefix string = ",\"damage_to_players_energy_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersEnergyNumShots))
	}
	if in.DamageToPlayersFighterBomberAmount != 0 {
		const prefix string = ",\"damage_to_players_fighter_bomber_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersFighterBomberAmount))
	}
	if in.DamageToPlayersFighterBomberNumShots != 0 {
		const prefix string = ",\"damage_to_players_fighter_bomber_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersFighterBomberNumShots))
	}
	if in.DamageToPlayersFighterDroneAmount != 0 {
		const prefix string = ",\"damage_to_players_fighter_drone_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersFighterDroneAmount))
	}
	if in.DamageToPlayersFighterDroneNumShots != 0 {
		const prefix string = ",\"damage_to_players_fighter_drone_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersFighterDroneNumShots))
	}
	if in.DamageToPlayersHybridAmount != 0 {
		const prefix string = ",\"damage_to_players_hybrid_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersHybridAmount))
	}
	if in.DamageToPlayersHybridNumShots != 0 {
		const prefix string = ",\"damage_to_players_hybrid_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersHybridNumShots))
	}
	if in.DamageToPlayersMissileAmount != 0 {
		const prefix string = ",\"damage_to_players_missile_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersMissileAmount))
	}
	if in.DamageToPlayersMissileNumShots != 0 {
		const prefix string = ",\"damage_to_players_missile_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersMissileNumShots))
	}
	if in.DamageToPlayersProjectileAmount != 0 {
		const prefix string = ",\"damage_to_players_projectile_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersProjectileAmount))
	}
	if in.DamageToPlayersProjectileNumShots != 0 {
		const prefix string = ",\"damage_to_players_projectile_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersProjectileNumShots))
	}
	if in.DamageToPlayersSmartBombAmount != 0 {
		const prefix string = ",\"damage_to_players_smart_bomb_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersSmartBombAmount))
	}
	if in.DamageToPlayersSmartBombNumShots != 0 {
		const prefix string = ",\"damage_to_players_smart_bomb_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersSmartBombNumShots))
	}
	if in.DamageToPlayersSuperAmount != 0 {
		const prefix string = ",\"damage_to_players_super_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersSuperAmount))
	}
	if in.DamageToPlayersSuperNumShots != 0 {
		const prefix string = ",\"damage_to_players_super_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToPlayersSuperNumShots))
	}
	if in.DamageToStructuresTotalAmount != 0 {
		const prefix string = ",\"damage_to_structures_total_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToStructuresTotalAmount))
	}
	if in.DamageToStructuresTotalNumShots != 0 {
		const prefix string = ",\"damage_to_structures_total_num_shots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DamageToStructuresTotalNumShots))
	}
	if in.DeathsHighSec != 0 {
		const prefix string = ",\"deaths_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsHighSec))
	}
	if in.DeathsLowSec != 0 {
		const prefix string = ",\"deaths_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsLowSec))
	}
	if in.DeathsNullSec != 0 {
		const prefix string = ",\"deaths_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsNullSec))
	}
	if in.DeathsPodHighSec != 0 {
		const prefix string = ",\"deaths_pod_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsPodHighSec))
	}
	if in.DeathsPodLowSec != 0 {
		const prefix string = ",\"deaths_pod_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsPodLowSec))
	}
	if in.DeathsPodNullSec != 0 {
		const prefix string = ",\"deaths_pod_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsPodNullSec))
	}
	if in.DeathsPodWormhole != 0 {
		const prefix string = ",\"deaths_pod_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsPodWormhole))
	}
	if in.DeathsWormhole != 0 {
		const prefix string = ",\"deaths_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeathsWormhole))
	}
	if in.DroneEngage != 0 {
		const prefix string = ",\"drone_engage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DroneEngage))
	}
	if in.Dscans != 0 {
		const prefix string = ",\"dscans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Dscans))
	}
	if in.DuelRequested != 0 {
		const prefix string = ",\"duel_requested\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DuelRequested))
	}
	if in.EngagementRegister != 0 {
		const prefix string = ",\"engagement_register\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.EngagementRegister))
	}
	if in.KillsAssists != 0 {
		const prefix string = ",\"kills_assists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsAssists))
	}
	if in.KillsHighSec != 0 {
		const prefix string = ",\"kills_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsHighSec))
	}
	if in.KillsLowSec != 0 {
		const prefix string = ",\"kills_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsLowSec))
	}
	if in.KillsNullSec != 0 {
		const prefix string = ",\"kills_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsNullSec))
	}
	if in.KillsPodHighSec != 0 {
		const prefix string = ",\"kills_pod_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsPodHighSec))
	}
	if in.KillsPodLowSec != 0 {
		const prefix string = ",\"kills_pod_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsPodLowSec))
	}
	if in.KillsPodNullSec != 0 {
		const prefix string = ",\"kills_pod_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsPodNullSec))
	}
	if in.KillsPodWormhole != 0 {
		const prefix string = ",\"kills_pod_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsPodWormhole))
	}
	if in.KillsWormhole != 0 {
		const prefix string = ",\"kills_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.KillsWormhole))
	}
	if in.NpcFlagSet != 0 {
		const prefix string = ",\"npc_flag_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NpcFlagSet))
	}
	if in.ProbeScans != 0 {
		const prefix string = ",\"probe_scans\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ProbeScans))
	}
	if in.PvpFlagSet != 0 {
		const prefix string = ",\"pvp_flag_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PvpFlagSet))
	}
	if in.RepairArmorByRemoteAmount != 0 {
		const prefix string = ",\"repair_armor_by_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairArmorByRemoteAmount))
	}
	if in.RepairArmorRemoteAmount != 0 {
		const prefix string = ",\"repair_armor_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairArmorRemoteAmount))
	}
	if in.RepairArmorSelfAmount != 0 {
		const prefix string = ",\"repair_armor_self_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairArmorSelfAmount))
	}
	if in.RepairCapacitorByRemoteAmount != 0 {
		const prefix string = ",\"repair_capacitor_by_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairCapacitorByRemoteAmount))
	}
	if in.RepairCapacitorRemoteAmount != 0 {
		const prefix string = ",\"repair_capacitor_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairCapacitorRemoteAmount))
	}
	if in.RepairCapacitorSelfAmount != 0 {
		const prefix string = ",\"repair_capacitor_self_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairCapacitorSelfAmount))
	}
	if in.RepairHullByRemoteAmount != 0 {
		const prefix string = ",\"repair_hull_by_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairHullByRemoteAmount))
	}
	if in.RepairHullRemoteAmount != 0 {
		const prefix string = ",\"repair_hull_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairHullRemoteAmount))
	}
	if in.RepairHullSelfAmount != 0 {
		const prefix string = ",\"repair_hull_self_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairHullSelfAmount))
	}
	if in.RepairShieldByRemoteAmount != 0 {
		const prefix string = ",\"repair_shield_by_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairShieldByRemoteAmount))
	}
	if in.RepairShieldRemoteAmount != 0 {
		const prefix string = ",\"repair_shield_remote_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairShieldRemoteAmount))
	}
	if in.RepairShieldSelfAmount != 0 {
		const prefix string = ",\"repair_shield_self_amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.RepairShieldSelfAmount))
	}
	if in.SelfDestructs != 0 {
		const prefix string = ",\"self_destructs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SelfDestructs))
	}
	if in.WarpScramblePc != 0 {
		const prefix string = ",\"warp_scramble_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpScramblePc))
	}
	if in.WarpScrambledbyNpc != 0 {
		const prefix string = ",\"warp_scrambledby_npc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpScrambledbyNpc))
	}
	if in.WarpScrambledbyPc != 0 {
		const prefix string = ",\"warp_scrambledby_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpScrambledbyPc))
	}
	if in.WeaponFlagSet != 0 {
		const prefix string = ",\"weapon_flag_set\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WeaponFlagSet))
	}
	if in.WebifiedbyNpc != 0 {
		const prefix string = ",\"webifiedby_npc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebifiedbyNpc))
	}
	if in.WebifiedbyPc != 0 {
		const prefix string = ",\"webifiedby_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebifiedbyPc))
	}
	if in.WebifyingPc != 0 {
		const prefix string = ",\"webifying_pc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WebifyingPc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsCombat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsCombat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson157dfe2cEncodeGithubComAntihaxGoesiEsi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsCombat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsCombat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson157dfe2cDecodeGithubComAntihaxGoesiEsi1(l, v)
}
