// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package esi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson504886c0DecodeGithubComAntihaxGoesiEsi(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsTravelList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetCharactersCharacterIdStatsTravelList, 0, 1)
			} else {
				*out = GetCharactersCharacterIdStatsTravelList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 GetCharactersCharacterIdStatsTravel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson504886c0EncodeGithubComAntihaxGoesiEsi(out *jwriter.Writer, in GetCharactersCharacterIdStatsTravelList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsTravelList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson504886c0EncodeGithubComAntihaxGoesiEsi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsTravelList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson504886c0EncodeGithubComAntihaxGoesiEsi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsTravelList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson504886c0DecodeGithubComAntihaxGoesiEsi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsTravelList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson504886c0DecodeGithubComAntihaxGoesiEsi(l, v)
}
func easyjson504886c0DecodeGithubComAntihaxGoesiEsi1(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsTravel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acceleration_gate_activations":
			out.AccelerationGateActivations = int64(in.Int64())
		case "align_to":
			out.AlignTo = int64(in.Int64())
		case "distance_warped_high_sec":
			out.DistanceWarpedHighSec = int64(in.Int64())
		case "distance_warped_low_sec":
			out.DistanceWarpedLowSec = int64(in.Int64())
		case "distance_warped_null_sec":
			out.DistanceWarpedNullSec = int64(in.Int64())
		case "distance_warped_wormhole":
			out.DistanceWarpedWormhole = int64(in.Int64())
		case "docks_high_sec":
			out.DocksHighSec = int64(in.Int64())
		case "docks_low_sec":
			out.DocksLowSec = int64(in.Int64())
		case "docks_null_sec":
			out.DocksNullSec = int64(in.Int64())
		case "jumps_stargate_high_sec":
			out.JumpsStargateHighSec = int64(in.Int64())
		case "jumps_stargate_low_sec":
			out.JumpsStargateLowSec = int64(in.Int64())
		case "jumps_stargate_null_sec":
			out.JumpsStargateNullSec = int64(in.Int64())
		case "jumps_wormhole":
			out.JumpsWormhole = int64(in.Int64())
		case "warps_high_sec":
			out.WarpsHighSec = int64(in.Int64())
		case "warps_low_sec":
			out.WarpsLowSec = int64(in.Int64())
		case "warps_null_sec":
			out.WarpsNullSec = int64(in.Int64())
		case "warps_to_bookmark":
			out.WarpsToBookmark = int64(in.Int64())
		case "warps_to_celestial":
			out.WarpsToCelestial = int64(in.Int64())
		case "warps_to_fleet_member":
			out.WarpsToFleetMember = int64(in.Int64())
		case "warps_to_scan_result":
			out.WarpsToScanResult = int64(in.Int64())
		case "warps_wormhole":
			out.WarpsWormhole = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson504886c0EncodeGithubComAntihaxGoesiEsi1(out *jwriter.Writer, in GetCharactersCharacterIdStatsTravel) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AccelerationGateActivations != 0 {
		const prefix string = ",\"acceleration_gate_activations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AccelerationGateActivations))
	}
	if in.AlignTo != 0 {
		const prefix string = ",\"align_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AlignTo))
	}
	if in.DistanceWarpedHighSec != 0 {
		const prefix string = ",\"distance_warped_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DistanceWarpedHighSec))
	}
	if in.DistanceWarpedLowSec != 0 {
		const prefix string = ",\"distance_warped_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DistanceWarpedLowSec))
	}
	if in.DistanceWarpedNullSec != 0 {
		const prefix string = ",\"distance_warped_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DistanceWarpedNullSec))
	}
	if in.DistanceWarpedWormhole != 0 {
		const prefix string = ",\"distance_warped_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DistanceWarpedWormhole))
	}
	if in.DocksHighSec != 0 {
		const prefix string = ",\"docks_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DocksHighSec))
	}
	if in.DocksLowSec != 0 {
		const prefix string = ",\"docks_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DocksLowSec))
	}
	if in.DocksNullSec != 0 {
		const prefix string = ",\"docks_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DocksNullSec))
	}
	if in.JumpsStargateHighSec != 0 {
		const prefix string = ",\"jumps_stargate_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.JumpsStargateHighSec))
	}
	if in.JumpsStargateLowSec != 0 {
		const prefix string = ",\"jumps_stargate_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.JumpsStargateLowSec))
	}
	if in.JumpsStargateNullSec != 0 {
		const prefix string = ",\"jumps_stargate_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.JumpsStargateNullSec))
	}
	if in.JumpsWormhole != 0 {
		const prefix string = ",\"jumps_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.JumpsWormhole))
	}
	if in.WarpsHighSec != 0 {
		const prefix string = ",\"warps_high_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsHighSec))
	}
	if in.WarpsLowSec != 0 {
		const prefix string = ",\"warps_low_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsLowSec))
	}
	if in.WarpsNullSec != 0 {
		const prefix string = ",\"warps_null_sec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsNullSec))
	}
	if in.WarpsToBookmark != 0 {
		const prefix string = ",\"warps_to_bookmark\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsToBookmark))
	}
	if in.WarpsToCelestial != 0 {
		const prefix string = ",\"warps_to_celestial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsToCelestial))
	}
	if in.WarpsToFleetMember != 0 {
		const prefix string = ",\"warps_to_fleet_member\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsToFleetMember))
	}
	if in.WarpsToScanResult != 0 {
		const prefix string = ",\"warps_to_scan_result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsToScanResult))
	}
	if in.WarpsWormhole != 0 {
		const prefix string = ",\"warps_wormhole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WarpsWormhole))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsTravel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson504886c0EncodeGithubComAntihaxGoesiEsi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsTravel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson504886c0EncodeGithubComAntihaxGoesiEsi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsTravel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson504886c0DecodeGithubComAntihaxGoesiEsi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsTravel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson504886c0DecodeGithubComAntihaxGoesiEsi1(l, v)
}
