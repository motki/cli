// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package esi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5b857651DecodeGithubComAntihaxGoesiEsi(in *jlexer.Lexer, out *GetCorporationsCorporationIdOutpostsOutpostIdOkList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetCorporationsCorporationIdOutpostsOutpostIdOkList, 0, 1)
			} else {
				*out = GetCorporationsCorporationIdOutpostsOutpostIdOkList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 GetCorporationsCorporationIdOutpostsOutpostIdOk
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b857651EncodeGithubComAntihaxGoesiEsi(out *jwriter.Writer, in GetCorporationsCorporationIdOutpostsOutpostIdOkList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetCorporationsCorporationIdOutpostsOutpostIdOkList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b857651EncodeGithubComAntihaxGoesiEsi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCorporationsCorporationIdOutpostsOutpostIdOkList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b857651EncodeGithubComAntihaxGoesiEsi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCorporationsCorporationIdOutpostsOutpostIdOkList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b857651DecodeGithubComAntihaxGoesiEsi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCorporationsCorporationIdOutpostsOutpostIdOkList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b857651DecodeGithubComAntihaxGoesiEsi(l, v)
}
func easyjson5b857651DecodeGithubComAntihaxGoesiEsi1(in *jlexer.Lexer, out *GetCorporationsCorporationIdOutpostsOutpostIdOk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerId = int32(in.Int32())
		case "system_id":
			out.SystemId = int32(in.Int32())
		case "docking_cost_per_ship_volume":
			out.DockingCostPerShipVolume = float32(in.Float32())
		case "office_rental_cost":
			out.OfficeRentalCost = int64(in.Int64())
		case "type_id":
			out.TypeId = int32(in.Int32())
		case "reprocessing_efficiency":
			out.ReprocessingEfficiency = float32(in.Float32())
		case "reprocessing_station_take":
			out.ReprocessingStationTake = float32(in.Float32())
		case "standing_owner_id":
			out.StandingOwnerId = int32(in.Int32())
		case "coordinates":
			(out.Coordinates).UnmarshalEasyJSON(in)
		case "services":
			if in.IsNull() {
				in.Skip()
				out.Services = nil
			} else {
				in.Delim('[')
				if out.Services == nil {
					if !in.IsDelim(']') {
						out.Services = make([]GetCorporationsCorporationIdOutpostsOutpostIdService, 0, 1)
					} else {
						out.Services = []GetCorporationsCorporationIdOutpostsOutpostIdService{}
					}
				} else {
					out.Services = (out.Services)[:0]
				}
				for !in.IsDelim(']') {
					var v4 GetCorporationsCorporationIdOutpostsOutpostIdService
					easyjson5b857651DecodeGithubComAntihaxGoesiEsi2(in, &v4)
					out.Services = append(out.Services, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b857651EncodeGithubComAntihaxGoesiEsi1(out *jwriter.Writer, in GetCorporationsCorporationIdOutpostsOutpostIdOk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OwnerId != 0 {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.OwnerId))
	}
	if in.SystemId != 0 {
		const prefix string = ",\"system_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.SystemId))
	}
	if in.DockingCostPerShipVolume != 0 {
		const prefix string = ",\"docking_cost_per_ship_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.DockingCostPerShipVolume))
	}
	if in.OfficeRentalCost != 0 {
		const prefix string = ",\"office_rental_cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OfficeRentalCost))
	}
	if in.TypeId != 0 {
		const prefix string = ",\"type_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TypeId))
	}
	if in.ReprocessingEfficiency != 0 {
		const prefix string = ",\"reprocessing_efficiency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ReprocessingEfficiency))
	}
	if in.ReprocessingStationTake != 0 {
		const prefix string = ",\"reprocessing_station_take\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.ReprocessingStationTake))
	}
	if in.StandingOwnerId != 0 {
		const prefix string = ",\"standing_owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.StandingOwnerId))
	}
	if true {
		const prefix string = ",\"coordinates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Coordinates).MarshalEasyJSON(out)
	}
	if len(in.Services) != 0 {
		const prefix string = ",\"services\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Services {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson5b857651EncodeGithubComAntihaxGoesiEsi2(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCorporationsCorporationIdOutpostsOutpostIdOk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5b857651EncodeGithubComAntihaxGoesiEsi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCorporationsCorporationIdOutpostsOutpostIdOk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5b857651EncodeGithubComAntihaxGoesiEsi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCorporationsCorporationIdOutpostsOutpostIdOk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5b857651DecodeGithubComAntihaxGoesiEsi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCorporationsCorporationIdOutpostsOutpostIdOk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5b857651DecodeGithubComAntihaxGoesiEsi1(l, v)
}
func easyjson5b857651DecodeGithubComAntihaxGoesiEsi2(in *jlexer.Lexer, out *GetCorporationsCorporationIdOutpostsOutpostIdService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "service_name":
			out.ServiceName = string(in.String())
		case "minimum_standing":
			out.MinimumStanding = float64(in.Float64())
		case "surcharge_per_bad_standing":
			out.SurchargePerBadStanding = float64(in.Float64())
		case "discount_per_good_standing":
			out.DiscountPerGoodStanding = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5b857651EncodeGithubComAntihaxGoesiEsi2(out *jwriter.Writer, in GetCorporationsCorporationIdOutpostsOutpostIdService) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiceName != "" {
		const prefix string = ",\"service_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceName))
	}
	if in.MinimumStanding != 0 {
		const prefix string = ",\"minimum_standing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MinimumStanding))
	}
	if in.SurchargePerBadStanding != 0 {
		const prefix string = ",\"surcharge_per_bad_standing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SurchargePerBadStanding))
	}
	if in.DiscountPerGoodStanding != 0 {
		const prefix string = ",\"discount_per_good_standing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DiscountPerGoodStanding))
	}
	out.RawByte('}')
}
