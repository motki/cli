// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package esi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsMiningList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(GetCharactersCharacterIdStatsMiningList, 0, 1)
			} else {
				*out = GetCharactersCharacterIdStatsMiningList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 GetCharactersCharacterIdStatsMining
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi(out *jwriter.Writer, in GetCharactersCharacterIdStatsMiningList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsMiningList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsMiningList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsMiningList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsMiningList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi(l, v)
}
func easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi1(in *jlexer.Lexer, out *GetCharactersCharacterIdStatsMining) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "drone_mine":
			out.DroneMine = int64(in.Int64())
		case "ore_arkonor":
			out.OreArkonor = int64(in.Int64())
		case "ore_bistot":
			out.OreBistot = int64(in.Int64())
		case "ore_crokite":
			out.OreCrokite = int64(in.Int64())
		case "ore_dark_ochre":
			out.OreDarkOchre = int64(in.Int64())
		case "ore_gneiss":
			out.OreGneiss = int64(in.Int64())
		case "ore_harvestable_cloud":
			out.OreHarvestableCloud = int64(in.Int64())
		case "ore_hedbergite":
			out.OreHedbergite = int64(in.Int64())
		case "ore_hemorphite":
			out.OreHemorphite = int64(in.Int64())
		case "ore_ice":
			out.OreIce = int64(in.Int64())
		case "ore_jaspet":
			out.OreJaspet = int64(in.Int64())
		case "ore_kernite":
			out.OreKernite = int64(in.Int64())
		case "ore_mercoxit":
			out.OreMercoxit = int64(in.Int64())
		case "ore_omber":
			out.OreOmber = int64(in.Int64())
		case "ore_plagioclase":
			out.OrePlagioclase = int64(in.Int64())
		case "ore_pyroxeres":
			out.OrePyroxeres = int64(in.Int64())
		case "ore_scordite":
			out.OreScordite = int64(in.Int64())
		case "ore_spodumain":
			out.OreSpodumain = int64(in.Int64())
		case "ore_veldspar":
			out.OreVeldspar = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi1(out *jwriter.Writer, in GetCharactersCharacterIdStatsMining) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DroneMine != 0 {
		const prefix string = ",\"drone_mine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DroneMine))
	}
	if in.OreArkonor != 0 {
		const prefix string = ",\"ore_arkonor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreArkonor))
	}
	if in.OreBistot != 0 {
		const prefix string = ",\"ore_bistot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreBistot))
	}
	if in.OreCrokite != 0 {
		const prefix string = ",\"ore_crokite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreCrokite))
	}
	if in.OreDarkOchre != 0 {
		const prefix string = ",\"ore_dark_ochre\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreDarkOchre))
	}
	if in.OreGneiss != 0 {
		const prefix string = ",\"ore_gneiss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreGneiss))
	}
	if in.OreHarvestableCloud != 0 {
		const prefix string = ",\"ore_harvestable_cloud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreHarvestableCloud))
	}
	if in.OreHedbergite != 0 {
		const prefix string = ",\"ore_hedbergite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreHedbergite))
	}
	if in.OreHemorphite != 0 {
		const prefix string = ",\"ore_hemorphite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreHemorphite))
	}
	if in.OreIce != 0 {
		const prefix string = ",\"ore_ice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreIce))
	}
	if in.OreJaspet != 0 {
		const prefix string = ",\"ore_jaspet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreJaspet))
	}
	if in.OreKernite != 0 {
		const prefix string = ",\"ore_kernite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreKernite))
	}
	if in.OreMercoxit != 0 {
		const prefix string = ",\"ore_mercoxit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreMercoxit))
	}
	if in.OreOmber != 0 {
		const prefix string = ",\"ore_omber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreOmber))
	}
	if in.OrePlagioclase != 0 {
		const prefix string = ",\"ore_plagioclase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OrePlagioclase))
	}
	if in.OrePyroxeres != 0 {
		const prefix string = ",\"ore_pyroxeres\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OrePyroxeres))
	}
	if in.OreScordite != 0 {
		const prefix string = ",\"ore_scordite\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreScordite))
	}
	if in.OreSpodumain != 0 {
		const prefix string = ",\"ore_spodumain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreSpodumain))
	}
	if in.OreVeldspar != 0 {
		const prefix string = ",\"ore_veldspar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.OreVeldspar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCharactersCharacterIdStatsMining) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCharactersCharacterIdStatsMining) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b92dc4EncodeGithubComAntihaxGoesiEsi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsMining) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCharactersCharacterIdStatsMining) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b92dc4DecodeGithubComAntihaxGoesiEsi1(l, v)
}
